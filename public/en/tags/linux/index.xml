<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>linux on ScienceChronicle</title>
    <link>https://www.ScienceChronicle.org/en/tags/linux/</link>
    <description>Recent content in linux on ScienceChronicle</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 17 Sep 2024 03:58:40 +0000</lastBuildDate><atom:link href="https://www.ScienceChronicle.org/en/tags/linux/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>User inactivity detection in Linux</title>
      <link>https://www.ScienceChronicle.org/en/article/user-inactivity-detection-in-linux/</link>
      <pubDate>Tue, 17 Sep 2024 03:58:40 +0000</pubDate>
      
      <guid>https://www.ScienceChronicle.org/en/article/user-inactivity-detection-in-linux/</guid>
      <description>We want to detect user inactivity on Linux system in a bash service run by systemd. Why? When user is inactive, we can launch some CPU-heavy tasks without disrupting user&amp;rsquo;s interaction with the system.
A user has 2 primary ways of interaction with Linux system: through textual terminal or UI desktop like Cinnamon, Xface, etc. The methods of user (in)activity detection are different for terminal and UI.
UI environment We conduct our tests on Linux Mint 20.</description>
    </item>
    
    <item>
      <title>Ensuring Safe File Operations in Linux: Handling Simultaneous Reads and Writes</title>
      <link>https://www.ScienceChronicle.org/en/article/ensuring-safe-file-operations-in-linux/</link>
      <pubDate>Sun, 18 Aug 2024 22:58:40 +0000</pubDate>
      
      <guid>https://www.ScienceChronicle.org/en/article/ensuring-safe-file-operations-in-linux/</guid>
      <description>Ensuring Safe File Operations in Linux: Handling Simultaneous Reads and Writes In Linux, managing file access between multiple processes can be tricky, especially when one script is writing to a file while another is reading from it. Without proper synchronization, you may encounter situations where a reader script accesses a partially written file, leading to incomplete or corrupt data reads. In this blog post, we&amp;rsquo;ll explore how to handle simultaneous file access safely using flock and atomic operations like mv.</description>
    </item>
    
    <item>
      <title>Network based message collector with socat</title>
      <link>https://www.ScienceChronicle.org/en/article/network-based-message-collector-with-socat/</link>
      <pubDate>Thu, 30 May 2024 11:52:37 +0000</pubDate>
      
      <guid>https://www.ScienceChronicle.org/en/article/network-based-message-collector-with-socat/</guid>
      <description>Overview The simplest message collector code can be implemented with socat:
socat -u TCP4-LISTEN:4444,reuseaddr,fork OPEN:/tmp/log.txt,creat,append It will listen on tcp port 4444, it can accept multiple simultaneous connections which guarantees no connection is refused and it will write the data recieved on the port to /tmp/log.txt, appending to the file if it already exists or creating a new if it does not.
The sender can be implemented in many ways, for example:</description>
    </item>
    
  </channel>
</rss>
