<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Computer on ScienceChronicle</title>
    <link>https://www.ScienceChronicle.org/en/categories/computer/</link>
    <description>Recent content in Computer on ScienceChronicle</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 06 Sep 2024 11:52:37 +0000</lastBuildDate><atom:link href="https://www.ScienceChronicle.org/en/categories/computer/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Installing Perl::LanguageServer fails because IO:AIO error: c compiler cannot create executables</title>
      <link>https://www.ScienceChronicle.org/en/article/perl-language-server-io-aio-c-compiler-cannot-create-executables/</link>
      <pubDate>Fri, 06 Sep 2024 11:52:37 +0000</pubDate>
      
      <guid>https://www.ScienceChronicle.org/en/article/perl-language-server-io-aio-c-compiler-cannot-create-executables/</guid>
      <description>The problem While attempting to install Perl::LanguageServer on my Linux Mint 20.3 Una, the following command:
cpan install Perl::LanguageServer failed, reporting that the IO::AIO dependency was unsatisfied.
I tried installing the IO::AIO module separately:
cpan install IO::AIO However, this resulted in the following error:
Continue anyways? [y] y checking for gcc... x86_64-linux-gnu-gcc checking whether the C compiler works... no configure: error: in `/home/morpher/.cpan/build/IO-AIO-4.81-7&amp;#39;: configure: error: C compiler cannot create executables See `config.</description>
    </item>
    
    <item>
      <title>Round-robin load-balancing between two VPNs with iptables and policy-based routing</title>
      <link>https://www.ScienceChronicle.org/en/article/round-robin-load-balancing-between-two-vpns-with-iptables-and-pbr/</link>
      <pubDate>Sun, 09 Jun 2024 11:52:37 +0000</pubDate>
      
      <guid>https://www.ScienceChronicle.org/en/article/round-robin-load-balancing-between-two-vpns-with-iptables-and-pbr/</guid>
      <description>Experiment 1 We want to send http traffik generated by our computer through a VPN tunnel.
VPN tunnels Create two VPN tunnels:
openvpn --config au.ovpn openvpn --config at.ovpn Two new interfaces will be created: tun0 and tun1.
Two configs should prevent setting of default gateways:
pull-filter ignore redirect-gateway Routing Create a new routing table:
echo &amp;#34;201 vpn1&amp;#34; &amp;gt;&amp;gt; /etc/iproute2/rt_tables and add default routing to the table:
ip route add default dev tun1 table vpn1 Check:</description>
    </item>
    
    <item>
      <title>Similarity between SQL and iptables Rules</title>
      <link>https://www.ScienceChronicle.org/en/article/similarity-between-sql-and-iptables-rules/</link>
      <pubDate>Sun, 09 Jun 2024 11:52:37 +0000</pubDate>
      
      <guid>https://www.ScienceChronicle.org/en/article/similarity-between-sql-and-iptables-rules/</guid>
      <description>Similarity between SQL and iptables Rules When dealing with databases and network packet filtering, there is an intriguing conceptual similarity between how SQL queries operate on rows in a database table and how iptables rules operate on network packets. This analogy can provide a deeper understanding of both systems by drawing parallels between their operations.
Similarities Between iptables and SQL Sequential Processing:
SQL: In SQL, when a query is executed, each row in the table is processed sequentially, applying the specified conditions and operations.</description>
    </item>
    
    <item>
      <title>Network based message collector with socat</title>
      <link>https://www.ScienceChronicle.org/en/article/network-based-message-collector-with-socat/</link>
      <pubDate>Thu, 30 May 2024 11:52:37 +0000</pubDate>
      
      <guid>https://www.ScienceChronicle.org/en/article/network-based-message-collector-with-socat/</guid>
      <description>Overview The simplest message collector code can be implemented with socat:
socat -u TCP4-LISTEN:4444,reuseaddr,fork OPEN:/tmp/log.txt,creat,append It will listen on tcp port 4444, it can accept multiple simultaneous connections which guarantees no connection is refused and it will write the data recieved on the port to /tmp/log.txt, appending to the file if it already exists or creating a new if it does not.
The sender can be implemented in many ways, for example:</description>
    </item>
    
  </channel>
</rss>
