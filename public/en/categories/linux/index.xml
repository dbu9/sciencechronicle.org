<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Linux on ScienceChronicle</title>
    <link>https://www.ScienceChronicle.org/en/categories/linux/</link>
    <description>Recent content in Linux on ScienceChronicle</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 06 Sep 2024 11:52:37 +0000</lastBuildDate><atom:link href="https://www.ScienceChronicle.org/en/categories/linux/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Installing Perl::LanguageServer fails because IO:AIO error: c compiler cannot create executables</title>
      <link>https://www.ScienceChronicle.org/en/article/perl-language-server-io-aio-c-compiler-cannot-create-executables/</link>
      <pubDate>Fri, 06 Sep 2024 11:52:37 +0000</pubDate>
      
      <guid>https://www.ScienceChronicle.org/en/article/perl-language-server-io-aio-c-compiler-cannot-create-executables/</guid>
      <description>The problem While attempting to install Perl::LanguageServer on my Linux Mint 20.3 Una, the following command:
cpan install Perl::LanguageServer failed, reporting that the IO::AIO dependency was unsatisfied.
I tried installing the IO::AIO module separately:
cpan install IO::AIO However, this resulted in the following error:
Continue anyways? [y] y checking for gcc... x86_64-linux-gnu-gcc checking whether the C compiler works... no configure: error: in `/home/morpher/.cpan/build/IO-AIO-4.81-7&amp;#39;: configure: error: C compiler cannot create executables See `config.</description>
    </item>
    
    <item>
      <title>A typical Perl project directory structure</title>
      <link>https://www.ScienceChronicle.org/en/article/typical-perl-project-directory-structure/</link>
      <pubDate>Sun, 01 Sep 2024 01:58:40 +0000</pubDate>
      
      <guid>https://www.ScienceChronicle.org/en/article/typical-perl-project-directory-structure/</guid>
      <description>A typical Perl project directory structure is designed to separate the main script(s) from modules, configurations, and other resources like tests or documentation. Here’s an example of a standard Perl project directory structure:
my_perl_project/ ├── bin/ │ └── main.pl ├── lib/ │ ├── MyApp/ │ │ ├── Module1.pm │ │ └── Module2.pm ├── t/ │ ├── 01_module1.t │ └── 02_module2.t ├── script/ │ └── some_utility_script.pl ├── doc/ │ └── README.md ├── Makefile.</description>
    </item>
    
    <item>
      <title>Using SQLITE database with Perl on OpenWRT</title>
      <link>https://www.ScienceChronicle.org/en/article/using-sqlite-with-perl-on-openwrt-no-dbd/</link>
      <pubDate>Wed, 21 Aug 2024 03:58:40 +0000</pubDate>
      
      <guid>https://www.ScienceChronicle.org/en/article/using-sqlite-with-perl-on-openwrt-no-dbd/</guid>
      <description>This article discusses using an SQLite database with Perl on the OpenWRT openwrt-23.05 branch (git-23.233.52805-dae2684). We aim to use an SQLite database with Perl.
First, we need to install the DBI module and then find and install DBD for SQLite. Let&amp;rsquo;s examine the directory of Perl modules available on OpenWRT: Perl Modules on OpenWRT .
One can see that the DBI module is present: perl-dbi . After installing it, let&amp;rsquo;s check which DBD modules are included:</description>
    </item>
    
    <item>
      <title>Ensuring Safe File Operations in Linux: Handling Simultaneous Reads and Writes</title>
      <link>https://www.ScienceChronicle.org/en/article/ensuring-safe-file-operations-in-linux/</link>
      <pubDate>Sun, 18 Aug 2024 22:58:40 +0000</pubDate>
      
      <guid>https://www.ScienceChronicle.org/en/article/ensuring-safe-file-operations-in-linux/</guid>
      <description>Ensuring Safe File Operations in Linux: Handling Simultaneous Reads and Writes In Linux, managing file access between multiple processes can be tricky, especially when one script is writing to a file while another is reading from it. Without proper synchronization, you may encounter situations where a reader script accesses a partially written file, leading to incomplete or corrupt data reads. In this blog post, we&amp;rsquo;ll explore how to handle simultaneous file access safely using flock and atomic operations like mv.</description>
    </item>
    
    <item>
      <title>Understanding Cronjob Self-Deletion: Behavior and Implications When Restarting Cron Service on OpenWRT</title>
      <link>https://www.ScienceChronicle.org/en/article/openwrt-understanding-cronjob-self-deletion/</link>
      <pubDate>Sun, 18 Aug 2024 01:58:40 +0000</pubDate>
      
      <guid>https://www.ScienceChronicle.org/en/article/openwrt-understanding-cronjob-self-deletion/</guid>
      <description>Intro The article addresses the question: Will a cronjob complete its run if it removes itself from the crontab and restarts the cron service? We conducted tests on OpenWRT version 23.05.3 240325 to find out.
Test To answer this question, we wrote a short Perl script, b.pl:
#!/usr/bin/perl print &amp;#34;Start\n&amp;#34;; `sed -i /b.pl/d /etc/crontabs/root`; print &amp;#34;Removed crontab entry\n&amp;#34;; `service cron restart`; print &amp;#34;Restarted cron service\n&amp;#34;; sleep(10); print &amp;#34;Slept 10 sec and now exiting\n&amp;#34;; We added the following crontab entry using crontab -e:</description>
    </item>
    
    <item>
      <title>Round-robin load-balancing between two VPNs with iptables and policy-based routing</title>
      <link>https://www.ScienceChronicle.org/en/article/round-robin-load-balancing-between-two-vpns-with-iptables-and-pbr/</link>
      <pubDate>Sun, 09 Jun 2024 11:52:37 +0000</pubDate>
      
      <guid>https://www.ScienceChronicle.org/en/article/round-robin-load-balancing-between-two-vpns-with-iptables-and-pbr/</guid>
      <description>Experiment 1 We want to send http traffik generated by our computer through a VPN tunnel.
VPN tunnels Create two VPN tunnels:
openvpn --config au.ovpn openvpn --config at.ovpn Two new interfaces will be created: tun0 and tun1.
Two configs should prevent setting of default gateways:
pull-filter ignore redirect-gateway Routing Create a new routing table:
echo &amp;#34;201 vpn1&amp;#34; &amp;gt;&amp;gt; /etc/iproute2/rt_tables and add default routing to the table:
ip route add default dev tun1 table vpn1 Check:</description>
    </item>
    
    <item>
      <title>Network based message collector with socat</title>
      <link>https://www.ScienceChronicle.org/en/article/network-based-message-collector-with-socat/</link>
      <pubDate>Thu, 30 May 2024 11:52:37 +0000</pubDate>
      
      <guid>https://www.ScienceChronicle.org/en/article/network-based-message-collector-with-socat/</guid>
      <description>Overview The simplest message collector code can be implemented with socat:
socat -u TCP4-LISTEN:4444,reuseaddr,fork OPEN:/tmp/log.txt,creat,append It will listen on tcp port 4444, it can accept multiple simultaneous connections which guarantees no connection is refused and it will write the data recieved on the port to /tmp/log.txt, appending to the file if it already exists or creating a new if it does not.
The sender can be implemented in many ways, for example:</description>
    </item>
    
  </channel>
</rss>
