<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Linux on ScienceChronicle</title>
    <link>https://www.ScienceChronicle.org/en/categories/linux/</link>
    <description>Recent content in Linux on ScienceChronicle</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 09 Jun 2024 11:52:37 +0000</lastBuildDate><atom:link href="https://www.ScienceChronicle.org/en/categories/linux/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Round-robin load-balancing between two VPNs with iptables and policy-based routing</title>
      <link>https://www.ScienceChronicle.org/en/article/round-robin-load-balancing-between-two-vpns-with-iptables-and-pbr/</link>
      <pubDate>Sun, 09 Jun 2024 11:52:37 +0000</pubDate>
      
      <guid>https://www.ScienceChronicle.org/en/article/round-robin-load-balancing-between-two-vpns-with-iptables-and-pbr/</guid>
      <description>Experiment 1 We want to send http traffik generated by our computer through a VPN tunnel.
VPN tunnels Create two VPN tunnels:
openvpn --config au.ovpn openvpn --config at.ovpn Two new interfaces will be created: tun0 and tun1.
Two configs should prevent setting of default gateways:
pull-filter ignore redirect-gateway Routing Create a new routing table:
echo &amp;#34;201 vpn1&amp;#34; &amp;gt;&amp;gt; /etc/iproute2/rt_tables and add default routing to the table:
ip route add default dev tun1 table vpn1 Check:</description>
    </item>
    
    <item>
      <title>Network based message collector with socat</title>
      <link>https://www.ScienceChronicle.org/en/article/network-based-message-collector-with-socat/</link>
      <pubDate>Thu, 30 May 2024 11:52:37 +0000</pubDate>
      
      <guid>https://www.ScienceChronicle.org/en/article/network-based-message-collector-with-socat/</guid>
      <description>Overview The simplest message collector code can be implemented with socat:
socat -u TCP4-LISTEN:4444,reuseaddr,fork OPEN:/tmp/log.txt,creat,append It will listen on tcp port 4444, it can accept multiple simultaneous connections which guarantees no connection is refused and it will write the data recieved on the port to /tmp/log.txt, appending to the file if it already exists or creating a new if it does not.
The sender can be implemented in many ways, for example:</description>
    </item>
    
  </channel>
</rss>
